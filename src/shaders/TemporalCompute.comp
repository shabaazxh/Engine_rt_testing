#version 460
// @TODO: REMEMBER THE NORMALS FROM THE GBUFFER ARE 0-1 AND NEED TO BE CONVERTED BACK TO
// -1-1 RANGE BY DOING * 2.0 - 1.0

#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const int NUM_LIGHTS = 100;

struct Light
{
	int Type;
	vec4 LightPosition;
	vec4 LightColour;
	mat4 LightSpaceMatrix;
};

layout(set = 0, binding = 0) uniform TemporalPassUniforms
{
    int frameIndex;
    vec2 viewportSize;
    int M;
} temp_ubo;


layout(set = 0, binding = 1) uniform LightBuffer {
	Light lights[NUM_LIGHTS];
} lightData;

layout(set = 0, binding = 2) uniform sampler2D initial_candidates_texture;
layout(set = 0, binding = 3) uniform sampler2D hit_world_position_texture;
layout(set = 0, binding = 4) uniform sampler2D hit_normals_texture;
layout(set = 0, binding = 5) uniform sampler2D motion_vectors_texture;
layout(set = 0, binding = 6) uniform sampler2D previous_frame_texture;
layout(set = 0, binding = 7, rgba32f) uniform image2D reservoir_output_image;
layout(set = 0, binding = 8) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 9) uniform sampler2D g_buffer_world_position;
layout(set = 0, binding = 10) uniform sampler2D g_buffer_normals;


// Reference: https://github.com/NVIDIAGameWorks/RTXGI-DDGI/blob/main/samples/test-harness/shaders/include/Random.hlsl#L42
uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint Xorshift(uint seed)
{
    // Xorshift algorithm from George Marsaglia's paper
    seed ^= (seed << 13);
    seed ^= (seed >> 17);
    seed ^= (seed << 5);
    return seed;
}

float GetRandomNumber(inout uint seed)
{
    seed = WangHash(seed);
    return float(Xorshift(seed)) * (1.f / 4294967296.f);
}

vec2 GetRandomHashValue01(inout uint seed)
{
    float u = GetRandomNumber(seed);
    float v = GetRandomNumber(seed);
    return vec2(u, v);
}


vec2 GetRandomHashValue(inout uint seed)
{
    float u = GetRandomNumber(seed) * 2.0 - 1.0;
    float v = GetRandomNumber(seed) * 2.0 - 1.0; // Seed is modified in-place
    return vec2(u, v);
}


float inShadow(vec3 position, vec3 normal, float distToLight, vec3 lightDir)
{
    rayQueryEXT rq;
    rayQueryInitializeEXT(rq, topLevelAS,
                          gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT,
                          0xFF,
                          position + normal * 0.001, // offset to avoid self-intersection
                          0.0,
                          lightDir,
                          distToLight);

    while (rayQueryProceedEXT(rq)) {
        // Just keep iterating until first hit or end
    }
    bool occluded = rayQueryGetIntersectionTypeEXT(rq, true) != gl_RayQueryCommittedIntersectionNoneEXT;

    return occluded ? 0.0 : 1.0;
}

struct Reservoir
{
    int index;
    float W_y;
    float W_sum;
    int M;
};

void update(uint seed, inout Reservoir reservoir, in float xi_weight, int index, int in_reservoir_m)
{
    reservoir.W_sum = reservoir.W_sum + xi_weight;
    float r = GetRandomNumber(seed);
    // reservoir.M += in_reservoir_m;
    if(r < (xi_weight / reservoir.W_sum))
    {
        reservoir.index = index;
    }
}

// @NOTE: Tip 3.4: Use 1 / M weights if and only if all inputs weights are identically distributed
// If initial candidates have different PDFs, such as when reusing across pixels. When reusing
// across pixels, if you're using different PDFs, the expectation is that nearby pixels might have used
// A different PDF compared to the others thus, MIS is needed to compute a balance heuristic.

// All these initial candidates used a uniform distribution i.e 1 / NUM_LIGHTS

Reservoir combine_reservoirs(vec4 current_pixel_reservoir_data, inout uint seed, vec3 n, vec3 pos, inout vec3 previous_pixel_position, inout vec3 previous_pixel_normal, inout int previous_pixel_reservoir_m, inout bool isValidHistory)
{
    // Init a reservoir with the current pixel reservoir data
    Reservoir reservoir;;
    reservoir.index = -1;
    reservoir.W_y = 0.0;
    reservoir.M = 0; // Number of candidates used during the initial candidates phase
    reservoir.W_sum = 0.0;

    // This will hold the two reservoirs, one for the current pixel and one for the previous frame pixel
    Reservoir reservoirs[2];
    for(int i = 0; i < 2; i++) {
        reservoirs[i].index = -1;
        reservoirs[i].W_y = 0.0;
        reservoirs[i].M = 0;
        reservoirs[i].W_sum = 0.0;
    }

    // Get the motion vector for the current pixel
    vec2 motion_vector = texelFetch(motion_vectors_texture, ivec2(gl_GlobalInvocationID.xy), 0).xy;

    // Get the previous frame pixel position by subtracting the motion vector from the current pixel position
    ivec2 current_pixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 previous_pixel = ivec2(current_pixel + (motion_vector * temp_ubo.viewportSize)); // motion_vector is difference between UV, we need it in pixels so multiply by viewportsize
    // previous_pixel = clamp(previous_pixel, ivec2(0), ivec2(temp_ubo.viewportSize - vec2(1)));

    // @TODO: This is currently just using the current_pixel to sample from previous texture for testing. It should be using previous_pixel but this is not working correctly.
    // Store previous pixel position and normal
    previous_pixel_position    = texelFetch(g_buffer_world_position, current_pixel, 0).xyz;
    previous_pixel_normal      = texelFetch(g_buffer_normals, current_pixel, 0).xyz * 2.0 - 1.0;

    // Init reservoir with currnet pixel frame data
    reservoirs[0].index = int(current_pixel_reservoir_data.x); // x = stores index into light array
    reservoirs[0].W_y   = current_pixel_reservoir_data.y;      // y = reservoir W_y weight
    reservoirs[0].M     = int(current_pixel_reservoir_data.z); // z = reservoir M

    // isValidHistory = dot(previous_pixel_normal, n) >= 0.99;

    if(isValidHistory) {
        // Init reservoir with previous frame pixel data
        reservoirs[1].index = int(texelFetch(previous_frame_texture, current_pixel, 0).x);
        reservoirs[1].W_y   = texelFetch(previous_frame_texture, current_pixel, 0).y;
        reservoirs[1].M = min(int(texelFetch(previous_frame_texture, current_pixel, 0).z), 20 * reservoirs[0].M); // // Paper at the end suggests clamping M for temporal reuse
        previous_pixel_reservoir_m = reservoirs[1].M;
    }

    for(int i = 0; i < 2; i++) {

//        if(reservoirs[i].index < 0) {
//            // If the reservoir index is -1, its an invalid sample, skip it
//            continue;
//        }

        Light L = lightData.lights[reservoirs[i].index];
        float dist = length(L.LightPosition.xyz - pos);
        const vec3 LightDir = normalize(L.LightPosition.xyz - pos);
        const float LightIntensity = 1000.0f * (1.0 / (dist * dist));

        // Evaluate F(x) at the current pixel
        float F_x = max(dot(n, LightDir), 0.0) * LightIntensity; // Simplied F(x) only doing diffuse

        // Algorithm 4: Line: 4: p^q(r.y) * r.W * r.M
        float w_i = F_x > 0.0 ? F_x * reservoirs[i].W_y * reservoirs[i].M : 0.0;

        // Update the reservoir using current sample data
        update(seed, reservoir, w_i, reservoirs[i].index, reservoirs[i].M);
    }

    // Algorithm 6: Line 4.
    for(uint i = 0; i < 2; i++)
    {
        reservoir.M += reservoirs[i].M;
    }

    return reservoir;
}


vec4 Temporal(vec3 n, vec3 pos)
{
    uvec2 dispatch_size = uvec2(temp_ubo.viewportSize / 8);
    uint launch_width = dispatch_size.x * gl_WorkGroupSize.x;
    uint seed = uint(gl_GlobalInvocationID.y * launch_width) + gl_GlobalInvocationID.x;
    seed *= temp_ubo.frameIndex;
    // seed = WangHash(seed);

    vec3 throughput = vec3(1.0);
    vec4 curr_reservoir = texelFetch(initial_candidates_texture, ivec2(gl_GlobalInvocationID.xy), 0).rgba;

    // Store previous pixel normal + position to perform visibility testing
    vec3 previous_pixel_normal = vec3(0.0);
    vec3 previous_pixel_position = vec3(0.0);
    int  previous_pixel_reservoir_m = 0;

    // Flag to ensure history is valid before using it
    bool isValidHistory = true;
    // Combine the reservoirs of the current and previous pixel
    Reservoir reservoir = combine_reservoirs(curr_reservoir, seed, n, pos, previous_pixel_position, previous_pixel_normal, previous_pixel_reservoir_m, isValidHistory);

    // If the reservoir index is -1, no light was selected, return early
    if(reservoir.index < 0) {
        return vec4(-1.0, 0.0, 0.0, 0.0);
    }

    // The reservoir should now contain the new updated sample and it should be valid
    // Use the index from the reservoir to fetch the light data
    Light L = lightData.lights[reservoir.index];

    // Algorithm 6: Unbiased combination of multiple reservoirs
    uint z = 0;
    // Compute F(x) for previous pixel + visibility
    vec3  previous_pixel_lighting_direction = normalize(L.LightPosition.xyz - previous_pixel_position);
    float previous_pixel_light_dist         = length(L.LightPosition.xyz - previous_pixel_position);
    float previous_pixel_light_intensity    = 1000.0f * (1.0 / (previous_pixel_light_dist * previous_pixel_light_dist));

    // If the history sample is valid, compute f(x) to check visbility
    if(isValidHistory) {
        // Cast the shadow ray
        float previous_pixel_visibility = inShadow(previous_pixel_position, previous_pixel_normal, previous_pixel_light_dist, previous_pixel_lighting_direction);

        // Compute f(x) for the previous pixel
        float previous_pixel_p_hat = max(dot(previous_pixel_normal, previous_pixel_lighting_direction), 0.0) * previous_pixel_light_intensity * previous_pixel_visibility;

        // If its not in shadow, add the previous pixels reservoir M to Z.
        z = previous_pixel_p_hat > 0.0 ? z + previous_pixel_reservoir_m : z;
    }

    // Compute visibility using the new reservoir index but for the current pixel
    vec3  current_pixel_light_direction = normalize(L.LightPosition.xyz - pos);
    float current_pixel_light_dist = length(L.LightPosition.xyz - pos);
    float current_pixel_light_intensity = 1000.0f * (1.0 / (current_pixel_light_dist * current_pixel_light_dist));

    float current_pixel_visibility = inShadow(pos, n, current_pixel_light_dist, current_pixel_light_direction);
    float current_pixel_p_hat = max(dot(n, current_pixel_light_direction), 0.0) * current_pixel_light_intensity * current_pixel_visibility;

    z = current_pixel_p_hat > 0.0 ? z + uint(curr_reservoir.z) : z;

    float m = (z > 0) ? 1.0 / float(z) : 0.0;

    // Algorithm 4: Line 6: Reservoir s: s.W = 1 / p^q(s.y) * ( 1 / s.M  * s.W_sum )
    // (1.0 / F_x) is the reciprocal of the target function F(x) that PDF(X) approximates better with more candidates.
    // reservoir.W_y = F_x > 0.0 ? (1.0 / F_x) * (1.0 / reservoir.M) * reservoir.W_sum : 0.0;

    // Algorithm 6:
    float F_x = max(dot(n, current_pixel_light_direction), 0.0) * current_pixel_light_intensity;
    reservoir.W_y = F_x > 0.0 ? (1.0 / F_x) * (m * reservoir.W_sum) : 0.0;

    return vec4(reservoir.index, reservoir.W_y, reservoir.M, 0.0);
}

void main() {

    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    // Get world and normal data
    vec4 world_position = texelFetch(g_buffer_world_position, coords, 0);
    vec4 world_normal   = texelFetch(g_buffer_normals, coords, 0) * 2.0 - 1.0;

    vec4 reservoir_out = Temporal(world_normal.xyz, world_position.xyz);

    imageStore(reservoir_output_image, coords, vec4(reservoir_out));
}