#version 460
// @TODO: REMEMBER THE NORMALS FROM THE GBUFFER ARE 0-1 AND NEED TO BE CONVERTED BACK TO
// -1-1 RANGE BY DOING * 2.0 - 1.0

#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const int NUM_LIGHTS = 100;

struct Light
{
	int Type;
	vec4 LightPosition;
	vec4 LightColour;
	mat4 LightSpaceMatrix;
};

layout(set = 0, binding = 0) uniform CandidatesPassUniforms
{
    int frameIndex;
    vec2 viewportSize;
    int M;
} cand_ubo;

#define CANDIDATE_MAX 32

layout(set = 0, binding = 1) uniform LightBuffer {
	Light lights[NUM_LIGHTS];
} lightData;

layout(set = 0, binding = 2) uniform sampler2D g_world_positions;
layout(set = 0, binding = 3) uniform sampler2D g_world_normals;
layout(set = 0, binding = 4) uniform sampler2D g_albedo;
layout(set = 0, binding = 5, rgba32f) uniform image2D reservoir_output_image;
layout(set = 0, binding = 6, rgba32f) uniform image2D shading_result_image;
layout(set = 0, binding = 7) uniform accelerationStructureEXT topLevelAS;


// Reference: https://github.com/NVIDIAGameWorks/RTXGI-DDGI/blob/main/samples/test-harness/shaders/include/Random.hlsl#L42
uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint Xorshift(uint seed)
{
    // Xorshift algorithm from George Marsaglia's paper
    seed ^= (seed << 13);
    seed ^= (seed >> 17);
    seed ^= (seed << 5);
    return seed;
}

float GetRandomNumber(inout uint seed)
{
    seed = WangHash(seed);
    return float(Xorshift(seed)) * (1.f / 4294967296.f);
}

vec2 GetRandomHashValue01(inout uint seed)
{
    float u = GetRandomNumber(seed);
    float v = GetRandomNumber(seed);
    return vec2(u, v);
}


vec2 GetRandomHashValue(inout uint seed)
{
    float u = GetRandomNumber(seed) * 2.0 - 1.0;
    float v = GetRandomNumber(seed) * 2.0 - 1.0; // Seed is modified in-place
    return vec2(u, v);
}

float inShadow(vec3 position, vec3 normal, float distToLight, vec3 lightDir)
{
    rayQueryEXT rq;
    rayQueryInitializeEXT(rq, topLevelAS,
                          gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT,
                          0xFF,
                          position + normal * 0.001, // offset to avoid self-intersection
                          0.0,
                          lightDir,
                          distToLight);

    while (rayQueryProceedEXT(rq)) {
        // Just keep iterating until first hit or end
    }
    bool occluded = rayQueryGetIntersectionTypeEXT(rq, true) != gl_RayQueryCommittedIntersectionNoneEXT;

    return occluded ? 0.0 : 1.0;
}

// @NOTE: Reservoir can also store the PDF. This is useful if we have multiple PDF which you draw samples from.
// This is needed for MIS which will need to be computed if using multiple PDF in both spatial and temporal
struct Reservoir
{
    int index;
    float W_y;
    float totalWeights;
    int M;
};

// This is Weighted Reservoir Sampling with RIS
void update(inout uint seed, inout Reservoir reservoir, in float xi_weight, int index)
{
    reservoir.totalWeights = reservoir.totalWeights + xi_weight;
    float r = GetRandomNumber(seed);
    reservoir.M = reservoir.M + 1;
    if(r < (xi_weight / reservoir.totalWeights))
    {
        reservoir.index = index;
    }
}

void RISReservoir(inout Reservoir reservoir, inout uint seed, vec3 pos, vec3 n, vec3 albedo)
{
    const float rcpUniformDistributionWeight = float(NUM_LIGHTS); // PDF of uniform distribution = 1 / total number of lights. Reciporal of that PDF is the light count e.g. 1 / 10 = 0.1 -> rcp = 1 / (1 / 10) = 10.0
    const float rcpM = 1.0 / float(CANDIDATE_MAX);

    // Picking any light direction has a uniform distribution
    for (int i = 0; i < CANDIDATE_MAX; i++) {

        // Pick a random light from all lights
        int randomLightIndex = int(GetRandomNumber(seed) * float(NUM_LIGHTS));
        Light light = lightData.lights[randomLightIndex];

        // Get the properties of this light
        float dist = length(light.LightPosition.xyz - pos);
        vec3 light_dir = normalize(light.LightPosition.xyz - pos);
        float LightIntensity = 1000.0f * (1.0 / (dist * dist));

        // Compute RIS weight for this candidate light
        float F_x = max(dot(n, light_dir), 0.0) * LightIntensity; // Simplied F(x) for weighting. Not sure if need to compute entir BRDF * cosine * ....?  // The target function F(x) that PDF(X) approximates better with more candidates. Using lambert cosine term but this can be other importance sampling methods

        // This is p^q(x_i) / p(x_i) where p^q(x_i) is the target function F_x and p(x_i) is the PDF of the uniform distribution which is 1 / NUM_LIGHTS. So we can compute the weight as F_x * rcpUniformDistributionWeight = F_x * (1 / NUM_LIGHTS) = F_x / NUM_LIGHTS
        float xi_weight = rcpM * F_x * rcpUniformDistributionWeight; // Move 1.0 / M to here when computing weight as suggested
        update(seed, reservoir, xi_weight, randomLightIndex);
    }
}


/*

Weighting in RIS works slightly differently to tranditional. While weighting is used, its not a PDF.
Instead we have an unbiased contribution weight called W_x which replaces 1/P(X).
A single sample X can have many valid W_x depending on the initial candidates samples.
This is because the initial candidates are chosen at random and for each set of them, any sample will
have a different weighing relative to them.
This means W_x is not a determiistic function of X, its a random variable. Since they're unbiased,
1/P(X) can be replaced by W_x.

*/

vec3 RISReservoirSampling(vec3 pos, vec3 n, vec3 albedo)
{
    uvec2 dispatchSize = uvec2(cand_ubo.viewportSize / 8);
    uint launchWidth = dispatchSize.x * gl_WorkGroupSize.x;
    uint seed = uint(gl_GlobalInvocationID.y * launchWidth) + gl_GlobalInvocationID.x;
    seed *= cand_ubo.frameIndex;

    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);

    Reservoir reservoir;
    reservoir.index = -1;
    reservoir.W_y = 0.0;
    reservoir.totalWeights = 0.0;
    reservoir.M = 0;

    // Compute the weights of the candidates from the original distribution
    RISReservoir(reservoir, seed, pos, n, albedo);

    bool isValidIndex = reservoir.index > -1;

    if(isValidIndex) {
        // The selected light
        int light_index = reservoir.index;
        Light LightSource = lightData.lights[light_index];
        float dist = length(LightSource.LightPosition.xyz - pos);
        vec3 light_dir = normalize(LightSource.LightPosition.xyz - pos);
        float LightIntensity = 1000.0f * (1.0 / (dist * dist));

        // Compute the light weight to prevent bias
        // W_x = (sum(w_i) / M) / pdf(x)
        // Written as: 1 / pdf(x) * (1 / m * sum(w_i)), but remember 1 / pdf(x) and 1 / m is the same as dividing by them since 1 / x is rcp
        float Fx = max(dot(n, light_dir), 0.0) * LightIntensity;
        float target_function = 1.0 / Fx; //  float(NUM_LIGHTS);

        // This is debug to ensure its valid, remove eventually -> this has an issue atm @TODO
        if (isinf(target_function))
            return vec3(1.0, 0.0, 1.0);

        // Evaluate the unbiased constribuion weight W_x
        // We moved rcpM = 1 / float(CANDIDATE_MAX) to func RISReservoir which is computing weight for each candidate as suggested by paper
        reservoir.W_y = target_function * (reservoir.totalWeights);

        // Perform visibility testing. Set reservoir weight to 0 if in shadow
        float Visibility = inShadow(pos, n, dist, light_dir);
        reservoir.W_y *= Visibility;

        // Store the current select sample Y, number of candidates M, and probabilistic weight W_y
        imageStore(reservoir_output_image, ivec2(gl_GlobalInvocationID.xy), vec4(reservoir.index, reservoir.W_y, reservoir.M, 0.0));

        vec3 directLighting = albedo * Fx * LightSource.LightColour.rgb;
        radiance += throughput * directLighting * reservoir.W_y * Visibility;
    }

    return radiance;
}

void main() {

    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    // Get world and normal data
    vec4 world_position = texelFetch(g_world_positions, coords, 0);
    vec4 world_normal   = texelFetch(g_world_normals, coords, 0) * 2.0 - 1.0;
    vec4 albedo = texelFetch(g_albedo, coords, 0);

    vec3 radiance = RISReservoirSampling(world_position.xyz, world_normal.xyz, albedo.rgb);

    imageStore(shading_result_image, coords, vec4(radiance, 0.0));
}