#version 460
#extension GL_EXT_ray_tracing : enable

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba16) uniform image2D image;
layout(set = 0, binding = 2) uniform SceneUniform
{
	mat4 model;
	mat4 view;
	mat4 projection;
    vec4 cameraPosition;
    vec2 viewportSize;
	float fov;
	float nearPlane;
	float farPlane;
} ubo;


struct RayPayLoad
{
    vec3 colour;
    vec3 normal;
    float hit;
};

layout(location = 0) rayPayloadEXT RayPayLoad rayPayLoad;

const int NUM_SAMPLES = 1;


float rand(inout uint seed) {
    seed = seed * 747796405u + 2891336453u;
    uint result = ((seed >> ((seed >> 28u) + 4u)) ^ seed) * 277803737u;
    result = (result >> 22u) ^ result;
    return result / 4294967295.0;
}

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = ubo.cameraPosition;
    vec4 target = inverse(ubo.projection) * vec4(d.x, d.y, 1, 1);
    vec4 direction = normalize(inverse(ubo.view) * vec4(normalize(target.xyz), 0));

    float tmin = 0.001;
    float tmax = 10000.0;

    rayPayLoad.colour = vec3(0.0);
    rayPayLoad.normal = vec3(0.0);
    rayPayLoad.hit = -1.0f;

    // Seed for random sampling (based on pixel ID)
    uint seed = uint(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x);
    vec3 totalRadiance = vec3(0.0);

    for (int i = 0; i < NUM_SAMPLES; i++) {

        vec2 jitter = vec2(rand(seed), rand(seed)) - 0.5; // [-0.5, 0.5]
        vec2 jitteredD = d + jitter * (1.0 / gl_LaunchSizeEXT.xy);

        vec4 target = inverse(ubo.projection) * vec4(jitteredD.x, jitteredD.y, 1, 1);
        vec4 direction = normalize(inverse(ubo.view) * vec4(normalize(target.xyz), 0));

        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

        totalRadiance += rayPayLoad.colour;
    }

    rayPayLoad.colour = totalRadiance / float(NUM_SAMPLES);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(rayPayLoad.colour, 0.0));
}
